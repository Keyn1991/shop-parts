# docker-compose.yml
services:
  # Serwis Backendu
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: parts-shop-backend
    restart: unless-stopped
    ports:
      # Mapuje port zdefiniowany w zmiennej ${PORT} (lub domyślnie 3000 z .env) na hoście
      # na port 3000 WEWNĄTRZ kontenera (na którym nasłuchuje NestJS)
      - "${PORT:-3000}:3000" # <<< POPRAWKA I WYJAŚNIENIE
    environment:
      - NODE_ENV=${NODE_ENV:-production} # Domyślnie production jeśli nie ma w .env
      - PORT=${PORT:-3000} # Port WEWNĄTRZ kontenera, na którym NestJS nasłuchuje
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - TYPEORM_SYNCHRONIZE=${TYPEORM_SYNCHRONIZE:-false} # Domyślnie false
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - FRONTEND_URL=${FRONTEND_URL} # Dla CORS
      - SWAGGER_API_DOCS_PATH=${SWAGGER_API_DOCS_PATH} # Dla Swaggera
      # Możesz dodać też inne zmienne SWAGGER_ jeśli chcesz
      # - SWAGGER_API_TITLE=${SWAGGER_API_TITLE}
      # - SWAGGER_API_DESC=${SWAGGER_API_DESC}
      # - SWAGGER_API_VERSION=${SWAGGER_API_VERSION}
    depends_on:
      - db
    networks:
      - app-network

  # Serwis Frontendu
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: parts-shop-frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - app-network
    # Jeśli BASE_API_URL frontendu ma być konfigurowalny w czasie budowania:
    # build:
    #   context: ./frontend
    #   dockerfile: Dockerfile
    #   args:
    #     VITE_API_URL: ${VITE_API_URL:-http://localhost:3000} # Odczytaj z .env lub użyj domyślnego

  # Serwis Bazy Danych (MySQL)
  db:
    image: mysql:8.0
    container_name: parts-shop-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
    ports:
      - "33061:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data: